services:
    kafka:
        image: apache/kafka:3.8.1
        environment:
            KAFKA_NODE_ID: 1
            KAFKA_PROCESS_ROLES: broker,controller
            KAFKA_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
            KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
            KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
            KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
            KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
            KAFKA_NUM_PARTITIONS: 3
        healthcheck:
            test: /opt/kafka/bin/kafka-broker-api-versions.sh --bootstrap-server localhost:9092 || exit 1
            interval: 2s
            start_interval: 2s
            retries: 10
        networks:
            - kafka-network

    kafka-init-topics:
        image: apache/kafka:3.8.1
        depends_on:
            kafka:
                condition: service_healthy
        environment:
            BOOTSTRAP_SERVER: kafka:9092
            TRADE_EVENTS_TOPIC_NAME: trade-events
            TRADE_EVENTS_PARTITIONS: 1
            TRADE_EVENTS_REPLICATION_FACTOR: 1
            LATENCY_TOPIC_NAME: timestamps
            LATENCY_PARTITIONS: 1
            LATENCY_REPLICATION_FACTOR: 1
        volumes:
            - ./kafka-init-topics.sh:/kafka-init-topics.sh
        entrypoint: ["/bin/sh", "-c"]
        command: |
            /kafka-init-topics.sh
        networks:
            - kafka-network

    data_producer:
        image: data_producer
        depends_on:
            kafka-init-topics:
                condition: service_completed_successfully
        build:
            context: data_producer
            dockerfile: Dockerfile
        environment:
            SPEED_FACTOR: 1
            CSV_PATH: /data/debs2022-gc-trading-day-12-11-21.csv
            PRINT_SENT_RECORDS: true
        volumes:
            - ./data:/data
        networks:
            - kafka-network
    data_analyzer:
        image: data_analyzer
        depends_on:
            # - spark-master
            - data_producer
        build:
            context: data_analyzer
            dockerfile: Dockerfile
        volumes:
            - ./data:/data
        networks:
            - kafka-network

    # spark-master:
    #     image: bde2020/spark-master:3.3.0-hadoop3.3
    #     container_name: spark-master
    #     ports:
    #         - "8080:8080" # Spark Web UI
    #         - "7077:7077" # Spark Master Port
    #     environment:
    #         INIT_DAEMON_STEP: setup_spark
    #     networks:
    #         - kafka-network

    # spark-worker-1:
    #     image: bde2020/spark-worker:3.3.0-hadoop3.3
    #     container_name: spark-worker-1
    #     depends_on:
    #         - spark-master
    #     ports:
    #         - "8081:8081" # Spark Worker UI
    #     environment:
    #         - SPARK_MASTER=spark://spark-master:7077
    #     networks:
    #         - kafka-network

    # influxdb:
    #     image: influxdb:2.7
    #     environment:
    #         DOCKER_INFLUXDB_INIT_MODE: setup
    #         DOCKER_INFLUXDB_INIT_USERNAME: admin
    #         DOCKER_INFLUXDB_INIT_PASSWORD: admin-password
    #         DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: "1dd585b8fd63b23323387dae193220381521cdee5f1ea50086b091deae1c2c44"
    #         DOCKER_INFLUXDB_INIT_ORG: docs
    #         DOCKER_INFLUXDB_INIT_BUCKET: home

    #     ports:
    #         - "8086:8086" # InfluxDB default port
    #     volumes:
    #         - influxdb-storage:/var/lib/influxdb
    #     networks:
    #         - kafka-network

    latencylogger:
        image: latency_logger
        environment:
            TOPIC_NAME: timestamps

        depends_on:
            kafka-init-topics:
                condition: service_completed_successfully
        build:
            context: latency_logger
            dockerfile: Dockerfile
        volumes:
            - ./logs:/logs
        networks:
            - kafka-network

# volumes:
#     influxdb-storage:

networks:
    kafka-network:
        driver: bridge
